<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<script type="text/javascript" src="js/main.js"></script>
	<link rel="stylesheet" href="styles/smart.apireference.css" type="text/css" />
	<title>ListBox API Reference</title>
</head>
<body>
	<div id="properties">
		<h2 class="documentation-top-header">Properties</h2>
		<table class="documentation-table">
			<tbody>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan0">dataSource</span>
					</td>
					<td>
						<span>any</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the data source that will be loaded to the ListBox.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>dataSource</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box data-source='["item 1", "item 2"]'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>dataSource</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.dataSource = ["new item 1", "new item 2"];</PRE><br/>
 

							<P>Get the <strong>dataSource</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let dataSource = listBox.dataSource;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan1">disabled</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Enables or disables the list box.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box disabled&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>disabled</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.disabled = false;</PRE><br/>
 

							<P>Get the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let disabled = listBox.disabled;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan2">displayLoadingIndicator</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Displays or hidess the loading indicator</p>
							<h4>Code examples</h4>

							<P>Set the <strong>displayLoadingIndicator</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box display-loading-indicator&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>displayLoadingIndicator</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.displayLoadingIndicator = false;</PRE><br/>
 

							<P>Get the <strong>displayLoadingIndicator</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let displayLoadingIndicator = listBox.displayLoadingIndicator;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan3">displayMember</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						""
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the displayMember. The displayMember specifies the name of an object property to display. The name is contained in the collection specified by the 'dataSource' property.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>displayMember</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box display-member='label'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>displayMember</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.displayMember = 'name';</PRE><br/>
 

							<P>Get the <strong>displayMember</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let displayMember = listBox.displayMember;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan4">dropAction</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						move
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines what happens when an item is dropped. Possible values:  'copy', 'move', 'none'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>dropAction</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box drop-action='copy'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>dropAction</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.dropAction = 'move';</PRE><br/>
 

							<P>Get the <strong>dropAction</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let dropAction = listBox.dropAction;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan5">filterable</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines whether the Filtering is enabled.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterable</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box filterable&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>filterable</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.filterable = false;</PRE><br/>
 

							<P>Get the <strong>filterable</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let filterable = listBox.filterable;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan6">filterCallback</span>
					</td>
					<td>
						<span>function</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>A callback function that defines the custom filtering when filterMode is set to 'custom'</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterCallback</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box filter-callback='function(item, searchQuery) { return item.value.toLowerCase() === searchQuery.toLowerCase() }'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>filterCallback</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.filterCallback = function(item, searchQuery) { return item.value > 5 };</PRE><br/>
 

							<P>Get the <strong>filterCallback</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let filterCallback = listBox.filterCallback;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan7">filterMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						startsWithIgnoreCase
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the filtering mode. Possible values:  'contains', 'containsIgnoreCase', 'doesNotContain', 'doesNotContainIgnoreCase', 'equals', 'equalsIgnoreCase', 'startsWith', 'startsWithIgnoreCase', 'endsWith', 'endsWithIgnoreCase', 'custom'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box filter-mode='contains'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>filterMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.filterMode = 'equals';</PRE><br/>
 

							<P>Get the <strong>filterMode</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let filterMode = listBox.filterMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan8">filterInputPlaceholder</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the placeholder for the filter input field.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterInputPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box filter-input-placeholder='Enter a value:'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>filterInputPlaceholder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.filterInputPlaceholder = 'Awaiting entry:';</PRE><br/>
 

							<P>Get the <strong>filterInputPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let filterInputPlaceholder = listBox.filterInputPlaceholder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan9">grouped</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If enabled, the items will be grouped by their first letter. Can't be applied if the dataSource already contains groups.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>grouped</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box grouped&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>grouped</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.grouped = false;</PRE><br/>
 

							<P>Get the <strong>grouped</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let grouped = listBox.grouped;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan10">groupMember</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the groupMember. If it's not set, by default is used 'group' property of the source object.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>groupMember</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box group-member='group'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>groupMember</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.groupMember = 'section';</PRE><br/>
 

							<P>Get the <strong>groupMember</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let groupMember = listBox.groupMember;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan11">incrementalSearchDelay</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						700
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets ot gets the incrementalSearchDelay property. The incrementalSearchDelay specifies the time-interval in milliseconds after which the previous search string is deleted. The timer starts when you stop typing.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>incrementalSearchDelay</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box incremental-search-delay='group'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>incrementalSearchDelay</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.incrementalSearchDelay = mygroup;</PRE><br/>
 

							<P>Get the <strong>incrementalSearchDelay</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let incrementalSearchDelay = listBox.incrementalSearchDelay;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan12">incrementalSearchMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						startsWith
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets ot gets the mode of the incremental search mode. Possible values:  'none', 'contains', 'containsIgnoreCase', 'doesNotContain', 'doesNotContainIgnoreCase', 'equals', 'equalsIgnoreCase', 'startsWith', 'startsWithIgnoreCase', 'endsWith', 'endsWithIgnoreCase', 'matchMetaData'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>incrementalSearchMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box incremental-search-mode='contains'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>incrementalSearchMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.incrementalSearchMode = 'endsWith';</PRE><br/>
 

							<P>Get the <strong>incrementalSearchMode</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let incrementalSearchMode = listBox.incrementalSearchMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan13">itemTemplate</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The itemTemplate property is a string that represents the id of an HTMLTemplateElement in the DOM. It's used to load list items from the HTMLTemplateElement.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>itemTemplate</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box item-template='templateA'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>itemTemplate</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.itemTemplate = 'templateB';</PRE><br/>
 

							<P>Get the <strong>itemTemplate</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let itemTemplate = listBox.itemTemplate;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan14">loadingIndicatorPlaceholder</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						Loading...
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the text that will be displayed next to the loading indicator when the loader is visible and it's position is top or bottom.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>loadingIndicatorPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box loading-indicator-placeholder='Incoming data'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>loadingIndicatorPlaceholder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.loadingIndicatorPlaceholder = 'LOADING...';</PRE><br/>
 

							<P>Get the <strong>loadingIndicatorPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let loadingIndicatorPlaceholder = listBox.loadingIndicatorPlaceholder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan15">loadingIndicatorPosition</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						center
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The position of the loading indicator. Possible values:  'bottom', 'center', 'top'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>loadingIndicatorPosition</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box loading-indicator-position='bottom'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>loadingIndicatorPosition</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.loadingIndicatorPosition = 'top';</PRE><br/>
 

							<P>Get the <strong>loadingIndicatorPosition</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let loadingIndicatorPosition = listBox.loadingIndicatorPosition;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan16">messages</span>
					</td>
					<td>
						<span>object</span>
					</td>
					<td>
						{ "en": { "missingReference": "{{elementType}}: Missing reference to {{files}}.", "overridingProperties": "{{elementType}}: Overriding properties {{property1}} and {{property2}} applied. {{property1}} is applied.",  } }
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property <strong>language</strong>. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>messages</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box messages='{ "de": { "missingReference": "{{elementType}}: Fehlende Bezugnahme auf {{files}}.", "overridingProperties": "{{elementType}}: �bergeordnete Eigenschaften {{property1}} und {{property2}} wurden angewendet. {{property1}} angewendet wird." } }'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>messages</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.messages = { "de": { "missingReference": "{{elementType}}: Fehlende Bezugnahme auf {{files}}.", "overridingProperties": "{{elementType}}: �bergeordnete Eigenschaften {{property1}} und {{property2}} wurden angewendet. {{property1}} angewendet wird." } };</PRE><br/>
 

							<P>Get the <strong>messages</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let messages = listBox.messages;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan17">placeholder</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						No Items
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the widget's place holder, displayed when the widget is empty.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>placeholder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box placeholder='Placeholder'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>placeholder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.placeholder = 'New Placeholder';</PRE><br/>
 

							<P>Get the <strong>placeholder</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let placeholder = listBox.placeholder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan18">reorder</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines weather or not reordering of items by dragging is enabled.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>reorder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box reorder&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>reorder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.reorder = false;</PRE><br/>
 

							<P>Get the <strong>reorder</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let reorder = listBox.reorder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan19">selectedIndexes</span>
					</td>
					<td>
						<span>array</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets elected indexes.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectedIndexes</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box selected-indexes='["item 1"]'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>selectedIndexes</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.selectedIndexes = ["item 2"];</PRE><br/>
 

							<P>Get the <strong>selectedIndexes</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let selectedIndexes = listBox.selectedIndexes;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan20">selectedValues</span>
					</td>
					<td>
						<span>array</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets elected indexes.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectedValues</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box selected-values='[1,2,3]'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>selectedValues</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.selectedValues = [4,5,6];</PRE><br/>
 

							<P>Get the <strong>selectedValues</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let selectedValues = listBox.selectedValues;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan21">selectionMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						one
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines how many items can be selected. Possible values:  'none', 'default', 'zeroOrMany', 'oneOrMany', 'zeroOrOne', 'one', 'checkBox', 'radioButton'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectionMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box selection-mode='zeroOrMany'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>selectionMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.selectionMode = 'zeroOrOne';</PRE><br/>
 

							<P>Get the <strong>selectionMode</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let selectionMode = listBox.selectionMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan22">sorted</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines whether the items are sorted alphabetically or not</p>
							<h4>Code examples</h4>

							<P>Set the <strong>sorted</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box sorted&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>sorted</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.sorted = false;</PRE><br/>
 

							<P>Get the <strong>sorted</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let sorted = listBox.sorted;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan23">valueMember</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						""
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the value member of an item. Stored as value in the item object.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>valueMember</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box value-member='value'&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>valueMember</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.valueMember = 'newValue';</PRE><br/>
 

							<P>Get the <strong>valueMember</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let valueMember = listBox.valueMember;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan24">virtualized</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines weather or not Virtualization is used for the ListBox.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>virtualized</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-box virtualized&gt;&lt;/smart-list-box&gt;</PRE><br/>							<P>Set the <strong>virtualized</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
 
							<PRE class="prettyprint"> listBox.virtualized = false;</PRE><br/>
 

							<P>Get the <strong>virtualized</strong> property. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box');</PRE>
							<PRE class="prettyprint"> let virtualized = listBox.virtualized;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Events
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan25">change</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when selection is changed.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>change</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('change', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan26">dragEnd</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when an item is dragged.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>dragEnd</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('dragEnd', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan27">dragStart</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when an item is dropped.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>dragStart</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('dragStart', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan28">scrollBottomReached</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when user scrolls to the end of the list.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>scrollBottomReached</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('scrollBottomReached', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan29">scrollTopReached</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when user scrolls to the start of the list.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>scrollTopReached</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('scrollTopReached', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan30">swipeleft</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when the user swipes to the left, inside the listBox.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>swipeleft</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('swipeleft', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan31">swiperight</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when the user swipes to the right, inside the listBox.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>swiperight</strong> event by type: smartListBox
							</p>
							<p>
								<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
<PRE class="prettyprint"> listBox.addEventListener('swiperight', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Methods
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan32">clearItems</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Removes all items from the listBox.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>clearItems</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.clearItems(undefined); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan33">clearSelection</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Unselects all items.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>clearSelection</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.clearSelection(undefined); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan34">getItem</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Returns an item instance from the listBox.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>value</em></td>
											<td><em>string</em></td>
											<td><em>The value of an item from the listBox.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>HTMLElement</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>getItem</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.getItem(First); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan35">items</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Returns an array with the items from the listBox.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>Array</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>items</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.items(undefined); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan36">insert</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Inserts a new item at a specified position.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>position</em></td>
											<td><em>number</em></td>
											<td><em>The position where the item must be inserted.</em></td>
										</tr>
										<tr>
											<td><em>value</em></td>
											<td><em>any</em></td>
											<td><em>The value of the new item.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>insert</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.insert(5); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan37">remove</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Removes an item at a specified position.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>position</em></td>
											<td><em>number</em></td>
											<td><em>The position of the removed item.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>remove</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.remove(5); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan38">select</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Selects an item from the listBox. 
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>item</em></td>
											<td><em>String/HTMLElement</em></td>
											<td><em>A string, representing the value of the item or an HTML Element referencing an item from the list</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>select</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.select(First Item); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan39">unselect</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Unselects an item from the listBox. 
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>item</em></td>
											<td><em>String/HTMLElement</em></td>
											<td><em>A string, representing the value of the item or an HTML Element referencing an item from the list</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>unselect</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.unselect(First Item); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan40">update</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Updates an item from the listBox.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>position</em></td>
											<td><em>number</em></td>
											<td><em>The position where the item must be updated.</em></td>
										</tr>
										<tr>
											<td><em>value</em></td>
											<td><em>any</em></td>
											<td><em>The value of the updated item.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>update</strong> method. </P>
							<PRE class="prettyprint"> const listBox = document.querySelector('smart-list-box'); </PRE>
 							<PRE class="prettyprint"> listBox.update(5); </PRE>

						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</body>
</html>