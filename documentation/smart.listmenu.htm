<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<script type="text/javascript" src="js/main.js"></script>
	<link rel="stylesheet" href="styles/smart.apireference.css" type="text/css" />
	<title>ListMenu API Reference</title>
</head>
<body>
	<div id="properties">
		<h2 class="documentation-top-header">Properties</h2>
		<table class="documentation-table">
			<tbody>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan0">autoFocusOnMouseenter</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If set to <em>true</em>, on mouseenter, smartListMenu receives focus automatically.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>autoFocusOnMouseenter</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu auto-focus-on-mouseenter&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>autoFocusOnMouseenter</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.autoFocusOnMouseenter = false;</PRE><br/>
 

							<P>Get the <strong>autoFocusOnMouseenter</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let autoFocusOnMouseenter = listMenu.autoFocusOnMouseenter;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan1">checkable</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Allows top-level ListMenu items to be checkable. Other levels are controlled by setting <strong>checkable</strong> to the respective smart-menu-items-group.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>checkable</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu checkable&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>checkable</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.checkable = false;</PRE><br/>
 

							<P>Get the <strong>checkable</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let checkable = listMenu.checkable;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan2">checkboxes</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Allows checkboxes in the ListMenu.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>checkboxes</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu checkboxes&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>checkboxes</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.checkboxes = false;</PRE><br/>
 

							<P>Get the <strong>checkboxes</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let checkboxes = listMenu.checkboxes;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan3">checkMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						checkbox
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets the check mode of top-level ListMenu items. The behavior of checking could be as checkboxes or radio buttons. Other levels are controlled by setting <strong>checkMode</strong> to the respective smart-menu-items-group. Possible values:  'checkbox', 'radioButton'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>checkMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu check-mode='radioButton'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>checkMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.checkMode = 'checkbox';</PRE><br/>
 

							<P>Get the <strong>checkMode</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let checkMode = listMenu.checkMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan4">dataSource</span>
					</td>
					<td>
						<span>array</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the data source that will be loaded to the ListMenu.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>dataSource</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu data-source='[{ label: "File" }, { label: "Help" }]'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>dataSource</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.dataSource = [{ label: 'File', items: [{ label: 'New', shortcut: 'Ctrl+N' }] }];</PRE><br/>
 

							<P>Get the <strong>dataSource</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let dataSource = listMenu.dataSource;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan5">disabled</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Enables or disables smartListMenu.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu disabled&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>disabled</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.disabled = false;</PRE><br/>
 

							<P>Get the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let disabled = listMenu.disabled;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan6">displayLoadingIndicator</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Displays or hides the loading indicator</p>
							<h4>Code examples</h4>

							<P>Set the <strong>displayLoadingIndicator</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu display-loading-indicator&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>displayLoadingIndicator</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.displayLoadingIndicator = false;</PRE><br/>
 

							<P>Get the <strong>displayLoadingIndicator</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let displayLoadingIndicator = listMenu.displayLoadingIndicator;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan7">dropDownAppendTo</span>
					</td>
					<td>
						<span>string/HTMLElement</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets custom outer container where the minimized dropdown will be appednded. By default it is in the ListMenu. The value of the property can be an HTML element or the id of an HTML element.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>dropDownAppendTo</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu drop-down-append-to='body'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>dropDownAppendTo</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.dropDownAppendTo = 'customContainer';</PRE><br/>
 

							<P>Get the <strong>dropDownAppendTo</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let dropDownAppendTo = listMenu.dropDownAppendTo;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan8">dropDownPosition</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						auto
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the open direction of the ListMenu minimized dropdown. Possible values:  'top-left', 'top-right', 'bottom-left', 'bottom-right', 'auto'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>dropDownPosition</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu drop-down-position='top-left'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>dropDownPosition</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.dropDownPosition = 'top-right';</PRE><br/>
 

							<P>Get the <strong>dropDownPosition</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let dropDownPosition = listMenu.dropDownPosition;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan9">enableMouseWheelAction</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Enables or disables scrolling using the mouse wheel through overflowing menu items. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>enableMouseWheelAction</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu enable-mouse-wheel-action&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>enableMouseWheelAction</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.enableMouseWheelAction = true;</PRE><br/>
 

							<P>Get the <strong>enableMouseWheelAction</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let enableMouseWheelAction = listMenu.enableMouseWheelAction;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan10">filterable</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines whether the Filtering is enabled.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterable</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu filterable&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>filterable</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.filterable = false;</PRE><br/>
 

							<P>Get the <strong>filterable</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let filterable = listMenu.filterable;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan11">filterInputPlaceholder</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the placeholder for the filter input field.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterInputPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu filter-input-placeholder='Enter a value:'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>filterInputPlaceholder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.filterInputPlaceholder = 'Awaiting entry:';</PRE><br/>
 

							<P>Get the <strong>filterInputPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let filterInputPlaceholder = listMenu.filterInputPlaceholder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan12">filterMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						startsWithIgnoreCase
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the filtering mode. Possible values:  'contains', 'containsIgnoreCase', 'doesNotContain', 'doesNotContainIgnoreCase', 'equals', 'equalsIgnoreCase', 'startsWith', 'startsWithIgnoreCase', 'endsWith', 'endsWithIgnoreCase'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>filterMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu filter-mode='contains'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>filterMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.filterMode = 'equals';</PRE><br/>
 

							<P>Get the <strong>filterMode</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let filterMode = listMenu.filterMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan13">grouped</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If enabled, the items will be grouped by their first letter and sorted.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>grouped</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu grouped&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>grouped</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.grouped = false;</PRE><br/>
 

							<P>Get the <strong>grouped</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let grouped = listMenu.grouped;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan14">loadingIndicatorPlaceholder</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						Loading...
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the text that will be displayed next to the loading indicator when the loader is visible and it's position is top or bottom.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>loadingIndicatorPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu loading-indicator-placeholder='Incoming data'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>loadingIndicatorPlaceholder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.loadingIndicatorPlaceholder = 'LOADING...';</PRE><br/>
 

							<P>Get the <strong>loadingIndicatorPlaceholder</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let loadingIndicatorPlaceholder = listMenu.loadingIndicatorPlaceholder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan15">loadingIndicatorPosition</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						center
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The position of the loading indicator. Possible values:  'bottom', 'center', 'top'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>loadingIndicatorPosition</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu loading-indicator-position='bottom'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>loadingIndicatorPosition</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.loadingIndicatorPosition = 'top';</PRE><br/>
 

							<P>Get the <strong>loadingIndicatorPosition</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let loadingIndicatorPosition = listMenu.loadingIndicatorPosition;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan16">minimizeIconTemplate</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Used to load a custom minimize icon from an HTMLTemplateElement object. The HTMLTemplateElement is selected by it's id.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>minimizeIconTemplate</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu minimize-icon-template='template1'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>minimizeIconTemplate</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.minimizeIconTemplate = 'template2';</PRE><br/>
 

							<P>Get the <strong>minimizeIconTemplate</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let minimizeIconTemplate = listMenu.minimizeIconTemplate;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan17">minimizeWidth</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Determines the minimum width of the ListMenu at which it will switch from normal to minimized mode. If set to <em>null</em>, the ListMenu does not minimize automatically.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>minimizeWidth</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu minimize-width='100'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>minimizeWidth</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.minimizeWidth = 200;</PRE><br/>
 

							<P>Get the <strong>minimizeWidth</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let minimizeWidth = listMenu.minimizeWidth;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan18">overflow</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						auto
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the ListMenu's scroll buttons behavior. Applicable only when <strong>dropDownAppendTo</strong> is not <em>null</em>. Possible values:  'auto', 'hidden', 'scroll'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>overflow</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-list-menu overflow='hidden'&gt;&lt;/smart-list-menu&gt;</PRE><br/>							<P>Set the <strong>overflow</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
 
							<PRE class="prettyprint"> listMenu.overflow = 'scroll';</PRE><br/>
 

							<P>Get the <strong>overflow</strong> property. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu');</PRE>
							<PRE class="prettyprint"> let overflow = listMenu.overflow;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Events
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan19">expand</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when a smart-menu-items-group is expanded.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>expand</strong> event by type: smartListMenu
							</p>
							<p>
								<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
<PRE class="prettyprint"> listMenu.addEventListener('expand', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan20">itemClick</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when a list menu item (smart-menu-item) is clicked.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>itemClick</strong> event by type: smartListMenu
							</p>
							<p>
								<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
<PRE class="prettyprint"> listMenu.addEventListener('itemClick', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan21">scrollBottomReached</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when user scrolls to the bottom of the ListMenu.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>scrollBottomReached</strong> event by type: smartListMenu
							</p>
							<p>
								<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
<PRE class="prettyprint"> listMenu.addEventListener('scrollBottomReached', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Methods
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan22">addItem</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Adds an item.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>Item</em></td>
											<td><em>HTMLElement</em></td>
											<td><em>A smart-menu-item to add to the List Menu.</em></td>
										</tr>
										<tr>
											<td><em>Parent</em></td>
											<td><em>String/HTMLElement</em></td>
											<td><em>The smart-menu-items-group (or its id or numeric path) to add the item to.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>addItem</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.addItem(document.createElement('smart-menu-item')); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan23">back</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Navigates to the previous page (smart-menu-items-group).
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>back</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.back(undefined); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan24">changePage</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Navigates to a particular page (smart-menu-items-group).
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>id</em></td>
											<td><em>string</em></td>
											<td><em>The id or numeric path of a page (smart-menu-items-group).</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>changePage</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.changePage(0.0); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan25">checkItem</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Checks an item.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>id</em></td>
											<td><em>string</em></td>
											<td><em>The id or numeric path of an item</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>checkItem</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.checkItem(0.0); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan26">getItem</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Gets an item by its id or numeric path.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>id</em></td>
											<td><em>string</em></td>
											<td><em>The id or numeric path of an item</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>HTMLElement</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>getItem</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.getItem(0.0); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan27">maximize</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Maximizes the List Menu.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>maximize</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.maximize(undefined); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan28">minimize</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Minimizes the List Menu.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>minimize</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.minimize(undefined); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan29">removeItem</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Removes an item.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>item</em></td>
											<td><em>HTMLElement/String</em></td>
											<td><em>The smart-menu-item/smart-menu-items-group (or its id or numeric path) to remove.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>removeItem</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.removeItem(0.0); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan30">setFocusable</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Sets whether the element can be focused.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>focusable</em></td>
											<td><em>Boolean</em></td>
											<td><em>Whether the element can be focused.</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>setFocusable</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.setFocusable(); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan31">uncheckItem</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Unchecks an item.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>id</em></td>
											<td><em>string</em></td>
											<td><em>The id or numeric path of an item</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>uncheckItem</strong> method. </P>
							<PRE class="prettyprint"> const listMenu = document.querySelector('smart-list-menu'); </PRE>
 							<PRE class="prettyprint"> listMenu.uncheckItem(0.0); </PRE>

						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</body>
</html>