<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<script type="text/javascript" src="js/main.js"></script>
	<link rel="stylesheet" href="styles/smart.apireference.css" type="text/css" />
	<title>TextArea API Reference</title>
</head>
<body>
	<div id="properties">
		<h2 class="documentation-top-header">Properties</h2>
		<table class="documentation-table">
			<tbody>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan0">allowHorizontalScrollbar</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If is true, displaying of the horizontal scollbar is allowed.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>allowHorizontalScrollbar</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area allow-horizontal-scrollbar&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>allowHorizontalScrollbar</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.allowHorizontalScrollbar = false;</PRE><br/>
 

							<P>Get the <strong>allowHorizontalScrollbar</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let allowHorizontalScrollbar = textArea.allowHorizontalScrollbar;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan1">allowVerticalScrollbar</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If is true, displaying of the vertical scollbar is allowed.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>allowVerticalScrollbar</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area allow-vertical-scrollbar&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>allowVerticalScrollbar</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.allowVerticalScrollbar = false;</PRE><br/>
 

							<P>Get the <strong>allowVerticalScrollbar</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let allowVerticalScrollbar = textArea.allowVerticalScrollbar;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan2">autocapitalize</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						none
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Controls whether and how the text value should be automatically capitalized as it is entered/edited by the user. Possible values:  'none', 'words', 'characters'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>autocapitalize</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area autocapitalize='words'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>autocapitalize</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.autocapitalize = 'characters';</PRE><br/>
 

							<P>Get the <strong>autocapitalize</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let autocapitalize = textArea.autocapitalize;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan3">autocomplete</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						off
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>This attribute indicates whether the value of the control can be automatically completed by the browser. Possible values:  'on', 'off'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>autocomplete</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area autocomplete='on'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>autocomplete</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.autocomplete = 'off';</PRE><br/>
 

							<P>Get the <strong>autocomplete</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let autocomplete = textArea.autocomplete;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan4">autofocus</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Specifyes that a form control should have input focus when the page loads.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>autofocus</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area autofocus&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>autofocus</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.autofocus = false;</PRE><br/>
 

							<P>Get the <strong>autofocus</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let autofocus = textArea.autofocus;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan5">cols</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						20
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The visible width of the text control, in average character widths. If it is specified, it must be a positive integer. If it is not specified, the default value is 20.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>cols</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area cols='40'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>cols</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.cols = 60;</PRE><br/>
 

							<P>Get the <strong>cols</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let cols = textArea.cols;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan6">disabled</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Enables or disables the widget. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area disabled&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>disabled</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.disabled = false;</PRE><br/>
 

							<P>Get the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let disabled = textArea.disabled;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan7">displayMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						default
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Specifies how characters are displayed a Text Area. Possible values:  'escaped', 'default'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>displayMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area display-mode='escaped'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>displayMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.displayMode = 'default';</PRE><br/>
 

							<P>Get the <strong>displayMode</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let displayMode = textArea.displayMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan8">form</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The form element that the element is associated with (its "form owner"). The value of the attribute must be the ID of a form element in the same document.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>form</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area form='form1'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>form</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.form = 'form2';</PRE><br/>
 

							<P>Get the <strong>form</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let form = textArea.form;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan9">maxLength</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets/gets the maximum number of characters that the user can enter.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>maxLength</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area max-length='120'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>maxLength</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.maxLength = 150;</PRE><br/>
 

							<P>Get the <strong>maxLength</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let maxLength = textArea.maxLength;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan10">minLength</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						null
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets/gets the minimum number of characters that the user can enter.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>minLength</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area min-length='20'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>minLength</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.minLength = 50;</PRE><br/>
 

							<P>Get the <strong>minLength</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let minLength = textArea.minLength;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan11">messages</span>
					</td>
					<td>
						<span>object</span>
					</td>
					<td>
						{ "en": { "missingReference": "{{elementType}}: Missing reference to {{files}}." } }
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets an object specifying strings used in the widget that can be localized. Used in conjunction with the property <strong>language</strong>. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>messages</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area messages='{ "de": { "missingReference": "smartTank: Fehlende Bezugnahme auf {{files}}." } }'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>messages</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.messages = { "de": { "missingReference": "smartTank: Fehlende Bezugnahme auf {{files}}." } };</PRE><br/>
 

							<P>Get the <strong>messages</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let messages = textArea.messages;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan12">name</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						0
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The name of the control.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>name</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area name='TextArea'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>name</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.name = 'textarea';</PRE><br/>
 

							<P>Get the <strong>name</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let name = textArea.name;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan13">placeholder</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>A hint to the user of what can be entered in the control. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>placeholder</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area placeholder='Placeholder'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>placeholder</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.placeholder = 'PlaceHolder';</PRE><br/>
 

							<P>Get the <strong>placeholder</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let placeholder = textArea.placeholder;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan14">readonly</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If the widgets is readonly, the users cannot iteract with the element.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>readonly</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area readonly&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>readonly</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.readonly = true;</PRE><br/>
 

							<P>Get the <strong>readonly</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let readonly = textArea.readonly;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan15">required</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Specifies that the user must fill in a value before submitting a form</p>
							<h4>Code examples</h4>

							<P>Set the <strong>required</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area required&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>required</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.required = false;</PRE><br/>
 

							<P>Get the <strong>required</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let required = textArea.required;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan16">resizable</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Enables/ disables the resizing of the Text Area.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>resizable</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area resizable&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>resizable</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.resizable = false;</PRE><br/>
 

							<P>Get the <strong>resizable</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let resizable = textArea.resizable;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan17">rows</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						20
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The number of visible text lines for the control.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>rows</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area rows='40'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>rows</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.rows = 60;</PRE><br/>
 

							<P>Get the <strong>rows</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let rows = textArea.rows;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan18">selectAllOnFocus</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Specifies whether the content of the Text Area will be selected on focus.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectAllOnFocus</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area select-all-on-focus&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>selectAllOnFocus</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.selectAllOnFocus = false;</PRE><br/>
 

							<P>Get the <strong>selectAllOnFocus</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let selectAllOnFocus = textArea.selectAllOnFocus;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan19">selectionDirection</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						none
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The direction in which selection occurred.  Possible values:  'forward', 'backward', 'none'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectionDirection</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area selection-direction='forward'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>selectionDirection</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.selectionDirection = 'backward';</PRE><br/>
 

							<P>Get the <strong>selectionDirection</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let selectionDirection = textArea.selectionDirection;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan20">selectionEnd</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						0
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The index to the last character in the current selection. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectionEnd</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area selection-end='40'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>selectionEnd</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.selectionEnd = 60;</PRE><br/>
 

							<P>Get the <strong>selectionEnd</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let selectionEnd = textArea.selectionEnd;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan21">selectionStart</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						0
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>The index to the first character in the current selection.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>selectionStart</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area selection-start='40'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>selectionStart</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.selectionStart = 60;</PRE><br/>
 

							<P>Get the <strong>selectionStart</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let selectionStart = textArea.selectionStart;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan22">singleLine</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Specifies whether the content of the Text Area is in single line or not.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>singleLine</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area single-line&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>singleLine</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.singleLine = false;</PRE><br/>
 

							<P>Get the <strong>singleLine</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let singleLine = textArea.singleLine;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan23">spellcheck</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Setting the value of this attribute to true indicates that the element needs to have its spelling and grammar checked.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>spellcheck</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area spellcheck&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>spellcheck</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.spellcheck = false;</PRE><br/>
 

							<P>Get the <strong>spellcheck</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let spellcheck = textArea.spellcheck;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan24">value</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the value of the smartTextArea widget. </p>
							<h4>Code examples</h4>

							<P>Set the <strong>value</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area value='Demo value.'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>value</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.value = 'New demo value.';</PRE><br/>
 

							<P>Get the <strong>value</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let value = textArea.value;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan25">wrap</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						soft
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Indicates how the control wraps text. Possible values:  'hard', 'soft', 'off'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>wrap</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-text-area wrap='hard'&gt;&lt;/smart-text-area&gt;</PRE><br/>							<P>Set the <strong>wrap</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
 
							<PRE class="prettyprint"> textArea.wrap = 'soft';</PRE><br/>
 

							<P>Get the <strong>wrap</strong> property. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area');</PRE>
							<PRE class="prettyprint"> let wrap = textArea.wrap;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Events
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan26">change</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when the value of the Text Area is changed.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>change</strong> event by type: smartTextArea
							</p>
							<p>
								<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area'); </PRE>
<PRE class="prettyprint"> textArea.addEventListener('change', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Methods
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan27">focus</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Focuses the Text Area . 
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>focus</strong> method. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area'); </PRE>
 							<PRE class="prettyprint"> textArea.focus(); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan28">getSelected</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Gets user selection . 
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>None</em></td>
											<td><em></em></td>
											<td><em></em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>String</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>getSelected</strong> method. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area'); </PRE>
 							<PRE class="prettyprint"> textArea.getSelected(); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan29">select</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Sets user selection. 
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>range</em></td>
											<td><em>object</em></td>
											<td><em>Sets the start and the end of the selection. If is undefined, whole content is selected</em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>None</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>select</strong> method. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area'); </PRE>
 							<PRE class="prettyprint"> textArea.select([object Object]); </PRE>

						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan30">val</span>
					</td>
					<td>
						<span>Method</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								Get/set the value of the Text Area.
							</p>
							<div class="methodArgs">
								<table class="arguments">
									<tbody>
										<tr>
											<th>Parameter</th>
											<th>Type</th>
											<th>Description</th>
										</tr>
										<tr>
											<td><em>value</em></td>
											<td><em>string</em></td>
											<td><em>The value to be set. If no parameter is passed, returns the displayed value of the Text Area. </em></td>
										</tr>
									</tbody>
								</table>
								<strong>Return Value</strong><br />
								<em>String</em>
							</div>

							<h4>Code examples</h4>
							<P>Invoke the <strong>val</strong> method. </P>
							<PRE class="prettyprint"> let textArea = document.querySelector('smart-text-area'); </PRE>
 							<PRE class="prettyprint"> textArea.val(Value); </PRE>

						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
</body>
</html>