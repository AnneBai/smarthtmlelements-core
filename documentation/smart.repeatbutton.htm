<!DOCTYPE html>
<html lang="en-US">
<head>
	<meta charset="UTF-8">
	<script type="text/javascript" src="js/main.js"></script>
	<link rel="stylesheet" href="styles/smart.apireference.css" type="text/css" />
	<title>RepeatButton API Reference</title>
</head>
<body>
	<div id="properties">
		<h2 class="documentation-top-header">Properties</h2>
		<table class="documentation-table">
			<tbody>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan0">clickMode</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						release
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets the click mode of the button. Possible values:  'hover', 'press', 'release', 'pressAndRelease'.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>clickMode</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button click-mode='hover'&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>clickMode</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.clickMode = 'release';</PRE><br/>
 

							<P>Get the <strong>clickMode</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let clickMode = repeatButton.clickMode;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan1">delay</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						50
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets the delay between repeats in miliseconds.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>delay</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button delay='20'&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>delay</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.delay = 100;</PRE><br/>
 

							<P>Get the <strong>delay</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let delay = repeatButton.delay;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan2">disabled</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Enables or disables the ratio button.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button disabled&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>disabled</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.disabled = false;</PRE><br/>
 

							<P>Get the <strong>disabled</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let disabled = repeatButton.disabled;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan3">initialDelay</span>
					</td>
					<td>
						<span>number</span>
					</td>
					<td>
						150
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets a delay before the first repeat iteration in miliseconds.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>initialDelay</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button initial-delay='50'&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>initialDelay</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.initialDelay = 500;</PRE><br/>
 

							<P>Get the <strong>initialDelay</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let initialDelay = repeatButton.initialDelay;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan4">innerHTML</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						""
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets the inner HTML of the element.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>innerHTML</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button inner-h-t-m-l='Repeat Button Label'&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>innerHTML</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.innerHTML = 'New Repeat Button Label';</PRE><br/>
 

							<P>Get the <strong>innerHTML</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let innerHTML = repeatButton.innerHTML;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan5">name</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						""
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the widget's name.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>name</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button name='Name'&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>name</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.name = 'New Name';</PRE><br/>
 

							<P>Get the <strong>name</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let name = repeatButton.name;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan6">readonly</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>If the custom element is readonly, it cannot be interacted with.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>readonly</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button readonly&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>readonly</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.readonly = false;</PRE><br/>
 

							<P>Get the <strong>readonly</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let readonly = repeatButton.readonly;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan7">rightToLeft</span>
					</td>
					<td>
						<span>boolean</span>
					</td>
					<td>
						false
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>rightToLeft</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button right-to-left&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>rightToLeft</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.rightToLeft = false;</PRE><br/>
 

							<P>Get the <strong>rightToLeft</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let rightToLeft = repeatButton.rightToLeft;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan8">value</span>
					</td>
					<td>
						<span>string</span>
					</td>
					<td>
						""
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>Sets or gets the widget's value.</p>
							<h4>Code examples</h4>

							<P>Set the <strong>value</strong> property. </P>
							<PRE class="prettyprint"> &lt;smart-repeat-button value='Value'&gt;&lt;/smart-repeat-button&gt;</PRE><br/>							<P>Set the <strong>value</strong> property by using the HTML Element's instance. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
 
							<PRE class="prettyprint"> repeatButton.value = 'New Value';</PRE><br/>
 

							<P>Get the <strong>value</strong> property. </P>
							<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button');</PRE>
							<PRE class="prettyprint"> let value = repeatButton.value;</PRE>
						</div>
					</td>
				</tr>

				<tr>
					<td colspan="3" style="width: 100%">
						<h2 class="documentation-top-header">
							Events
						</h2>
					</td>
				</tr>
				<tr>
					<td class="documentation-option-type-click">
						<span id="propertiesSpan9">click</span>
					</td>
					<td>
						<span>Event</span>
					</td>
					<td>
						
					</td>
				</tr>
				<tr>
					<td colspan="3" style="width: 100%">
						<div class="documentation-option-description property-content" style="display: none;">
							<p>
								This event is triggered when the element is clicked.
							</p>
							<h4>Code examples</h4>

							<p>
								Bind to the <strong>click</strong> event by type: smartRepeatButton
							</p>
							<p>
								<PRE class="prettyprint"> const repeatButton = document.querySelector('smart-repeat-button'); </PRE>
<PRE class="prettyprint"> repeatButton.addEventListener('click', function (event) {
     // event handling code goes here.
 }
 </PRE>							</p>
						</div>
					</td>
				</tr>

			</tbody>
		</table>
	</div>
</body>
</html>