<!DOCTYPE html>
<html>
<head>
    <style type="text/css">
        #container {
            width: 850px;
            height: 500px;
        }
    </style>
    <script>
        // IE/Edge polyfill.
        if (!window.customElements) {
            document.writeln('<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/0.7.23/webcomponents-lite.js"><\/script>');
            document.write('<!--');
        }
    </script>
    <script type="text/javascript" src="../../source-minified/native-shim.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webcomponentsjs/1.0.22/webcomponents-lite.js"></script>
    <!--! do not remove -->
    <script>
       // IE polyfill.
        if (!(window.CSS && window.CSS.supports && window.CSS.supports('(--fake-var: 0)'))) {
            document.writeln('<link rel="stylesheet" href="../../source-minified/styles/smart.base-novars.css" type="text/css" />');
            document.write('<!--');
        }
    </script>
    <link rel="stylesheet" href="../../source-minified/styles/smart.base.css" type="text/css" />
    <!--! do not remove --> 
   <link rel="stylesheet" href="../styles/demos.css" type="text/css" />
    <script type="text/javascript" src="../../source-minified/smart.element-polyfills.js"></script>
    <script type="text/javascript" src="../../source-minified/smart.element.js"></script>
    <script type="text/javascript" src="../../source-minified/smart.draw.js"></script>
    <script type="text/javascript">
        window.onload = function () {
            var draw = new Smart.Utilities.Draw(document.getElementById('container')),
                size = draw.getSize(),
                // some sample values
                values = [200, 1, 15, 100, 8, 200, 200, 200, 1, 15, 100, 8, 200, 200, 1, 15, 100, 8, 200, 200, 1, 15, 100, 8, 200, 1, 15, 100, 8, 200, 200, 1, 15, 100, 8, 200],
                // calaculate the values' range
                values_range = {
                    min: draw.min(values),
                    max: draw.max(values)
                };

            var x_prev = NaN,
                y_prev = NaN;

            for (var i = 0; i < values.length; i++) {
                // calculate the horizontal offset
                var x = draw.scale(
                    i,                               // value
                    { min: 0, max: values.length },  // horizontal range (from 0 to the number of elements)
                    { min: 0, max: size.width }      // horizontal area size
                );

                // calculate the vertical offset
                var y = draw.scale(
                    values[i],                                // value
                    values_range,                             // vertical range (from min to max value)
                    { min: 0, max: size.height, flip: true }  // vertical area size
                 );

                if (isNaN(x_prev) || isNaN(y_prev)) {
                    x_prev = x;
                    y_prev = y;
                }

                // draw a line from the previous to the current point
                draw.line(x_prev, y_prev, x, y, { stroke: 'blue', 'stroke-width': 1 });

                x_prev = x;
                y_prev = y;
            }
        }
    </script>
</head>
<body>
    <div id="container">
    </div>
</body>
</html>
